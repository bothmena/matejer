<?php

namespace ABO\MainBundle\Entity;

use ABO\TrademarkBundle\Entity\Arrangement;
use ABO\TrademarkBundle\Entity\Trademark;
use Doctrine\ORM\EntityRepository;

/**
 * ProductsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryProductRepository extends EntityRepository{
    
    /*
     * Main:Gallery:galleryProduct
     */
    public function searchProds($nom){
        $qb = $this->_em->createQueryBuilder();
        $qb->select('cp')
            ->from('ABOMainBundle:CategoryProduct', 'cp')
            ->join('cp.category', 'c')
            ->addSelect('c')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->join('cp.image', 'i')
            ->addSelect('i')
            ->join('cp.rateStat', 'r')
            ->addSelect('r')
            ->join('cp.generalSpecs', 'g')
            ->addSelect('g')
            ->leftJoin('cp.shop', 's')
            ->addSelect('s')
            ->leftJoin('s.image', 'si')
            ->addSelect('si')
            ->leftJoin('cp.trademark', 't')
            ->addSelect('t')
            ->leftJoin('t.image', 'ti')
            ->addSelect('ti')
            ->where($qb->expr()->orX(
                $qb->expr()->like('p.reference', ':nom'),
                $qb->expr()->like('p.name', ':nom')
            ))
            ->andWhere('cp.anyParent = 0')
            ->setParameter('nom', '%'.$nom.'%');
        
        return $qb->getQuery();
    }

    /*
     * PreAddType()
     */
    public function getParentProduct(){

        $qb = $this->_em->createQueryBuilder();
        $qb->select('cp')
            ->from('ABOMainBundle:CategoryProduct', 'cp')
            ->join('cp.category', 'c')
            ->addSelect('c')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->join('cp.arrangement', 'a')
            ->addSelect('a')
            ->where('cp.anyParent = 1');

        return $qb->getQuery()->getResult();
    }

    /*
     * TM:Product:addModel
     */
    public function getParentBySlug($slug) {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('cp')
            ->from('ABOMainBundle:CategoryProduct', 'cp')
            ->join('cp.category', 'c')
            ->addSelect('c')
            ->join('cp.generalSpecs', 'g')
            ->addSelect('g')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->where('p.slug = :slug')
            ->setParameter('slug', $slug);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /*
     * Main:Gallery:galleryProduct
     */
    public function myFindAll(){
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('cp')
            ->from('ABOMainBundle:CategoryProduct', 'cp')
            ->join('cp.category', 'c')
            ->addSelect('c')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->join('cp.image', 'i')
            ->addSelect('i')
            ->join('cp.rateStat', 'r')
            ->addSelect('r')
            ->join('cp.generalSpecs', 'g')
            ->addSelect('g')
            ->leftJoin('cp.shop', 's')
            ->addSelect('s')
            ->leftJoin('s.image', 'si')
            ->addSelect('si')
            ->leftJoin('cp.trademark', 't')
            ->addSelect('t')
            ->leftJoin('t.image', 'ti')
            ->addSelect('ti')
            ->where('cp.anyParent = 0');
        
        return $qb->getQuery();
    }
    
    /*
     * TM:Product:specification
     * Main:Modal:product
     */
    public function getProductBySlug($slug) {
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('cp')
            ->from('ABOMainBundle:CategoryProduct', 'cp')
            ->join('cp.category', 'c')
            ->addSelect('c')
            ->join('cp.generalSpecs', 'g')
            ->addSelect('g')
            ->join('cp.image', 'i')
            ->addSelect('i')
            ->join('cp.rateStat', 'r')
            ->addSelect('r')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->where('p.slug = :slug')
            ->setParameter('slug', $slug);
        
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    /*
     * Main:Product:product
     */
    public function productData($slug) { //product Id not CategoryProduct id
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('cp')
            ->from('ABOMainBundle:CategoryProduct', 'cp')
            ->join('cp.category', 'c')
            ->addSelect('c')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->join('cp.genSpec', 'g')
            ->addSelect('g')
            ->leftJoin('p.productFiches', 'pf')
            ->addSelect('pf')
            ->leftJoin('p.features', 'f')
            ->addSelect('f')
            ->leftJoin('p.colors', 'co')
            ->addSelect('co')
            ->leftJoin('cp.trademark', 't')
            ->addSelect('t')
            ->where('p.slug = :slug')
            ->setParameter('slug', $slug);
        
        return $qb->getQuery()->getOneOrNullResult();
    }

    /*
     * Main:Gallery:galleryProduct
     */
    public function whatsNew(){

        $qb = $this->_em->createQueryBuilder();
        $qb->select('cp')
            ->from('ABOMainBundle:CategoryProduct', 'cp')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->join('cp.image', 'i')
            ->addSelect('i')
            ->join('cp.generalSpecs', 'g')
            ->addSelect('g')
            ->join('cp.trademark', 't')
            ->addSelect('t')
            ->where('cp.anyParent = 0')
            ->orderBy('p.date', 'DESC')
            ->setMaxResults(6);

        return $qb->getQuery()->getResult();
    }

    public function allTMProds(Trademark $trademark) {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('cp')
            ->from('ABOMainBundle:CategoryProduct', 'cp')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->where('cp.trademark = :trademark')
            ->setParameter('trademark', $trademark);

        return $qb->getQuery()->getResult();
    }

    public function allTMProdsByCat(Trademark $trademark, Category $category) {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('cp')
            ->from('ABOMainBundle:CategoryProduct', 'cp')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->where('cp.trademark = :trademark')
            ->andWhere('cp.category = :category')
            ->setParameters(array('trademark' => $trademark, 'category' => $category));

        return $qb->getQuery()->getResult();
    }

    public function allTMProdsByArr(Trademark $trademark, Arrangement $arrangement) {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('cp')
            ->from('ABOMainBundle:CategoryProduct', 'cp')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->where('cp.trademark = :trademark')
            ->andWhere('cp.arrangement = :arrangement')
            ->setParameters(array('trademark' => $trademark, 'arrangement' => $arrangement));

        return $qb->getQuery()->getResult();
    }
}
