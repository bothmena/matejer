<?php

namespace ABO\MainBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WishlistRepository extends EntityRepository{
    
    /*
     * User:Profile:show
     */
    public function wishListProdsNb($user) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('w')
            ->from('ABOMainBundle:Wishlist', 'w')
            ->select('COUNT(w)')
            ->where('w.user = :user')
            ->setParameter('user', $user);

        return $qb->getQuery()->getSingleScalarResult();
    }
    
    /*
     * User:Profile:show
     */
    public function getUserLastProducts($user) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('w')
            ->from('ABOMainBundle:Wishlist', 'w')
            ->join('w.categoryProduct', 'cp')
            ->addSelect('cp')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->join('cp.category', 'c')
            ->addSelect('c')
            ->where('w.user = :user')
            ->setParameter('user', $user)
            ->orderBy('w.date','DESC')
            ->setMaxResults(5);
        return $qb->getQuery()
            ->getResult();
    }
    
    /*
     * User:Product:favored
     */
    public function getAllProducts($user) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('w')
            ->from('ABOMainBundle:Wishlist', 'w')
            ->join('w.categoryProduct', 'cp')
            ->addSelect('cp')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->join('cp.category', 'c')
            ->addSelect('c')
            ->join('cp.image', 'i')
            ->addSelect('i')
            ->join('cp.rateStat', 'r')
            ->addSelect('r')
            ->join('cp.generalSpecs', 'g')
            ->addSelect('g')
            ->leftJoin('cp.shop', 's')
            ->addSelect('s')
            ->leftJoin('s.image', 'si')
            ->addSelect('si')
            ->leftJoin('cp.trademark', 't')
            ->addSelect('t')
            ->leftJoin('t.image', 'ti')
            ->addSelect('ti')
            ->where('w.user = :user')
            ->setParameter('user', $user);

        return $qb->getQuery();
    }
    
    /*
     * Main:Gallery:galleryProduct
     */
    public function getUSserProds($user) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('w')
            ->from('ABOMainBundle:Wishlist', 'w')
            ->join('w.categoryProduct', 'cp')
            ->addSelect('cp')
            ->where('w.user = :user')
            ->setParameter('user', $user);
        return $qb->getQuery()
            ->getResult();
    }
    
    /*
     * User:Product:prodByCategory
     */
    public function getProdByCategory($user, $category) {
        $parameters = array('category' => $category, 'user' => $user);
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('w')
            ->from('ABOMainBundle:Wishlist', 'w')
            ->join('w.categoryProduct', 'cp')
            ->addSelect('cp')
            ->join('cp.product', 'p')
            ->addSelect('p')
            ->join('cp.category', 'c')
            ->addSelect('c')
            ->join('cp.image', 'i')
            ->addSelect('i')
            ->join('cp.rateStat', 'r')
            ->addSelect('r')
            ->join('cp.generalSpecs', 'g')
            ->addSelect('g')
            ->leftJoin('cp.shop', 's')
            ->addSelect('s')
            ->leftJoin('s.image', 'si')
            ->addSelect('si')
            ->leftJoin('cp.trademark', 't')
            ->addSelect('t')
            ->leftJoin('t.image', 'ti')
            ->addSelect('ti')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->eq('cp.category', ':category'),
                    $qb->expr()->eq('w.user', ':user')
                )
            )
            ->setParameters($parameters)
            ->orderBy('w.date','DESC');
        
        return $qb->getQuery();
    }
}
